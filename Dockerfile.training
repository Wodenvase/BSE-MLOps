# Dockerfile for SENSEX MLOps Training Environment - Phase 2
# Optimized for TensorFlow/Keras ConvLSTM training with comprehensive ML stack

FROM tensorflow/tensorflow:2.13.0-gpu-py3

# Set environment variables
ENV PYTHONPATH="/app/src:/app"
ENV MLFLOW_TRACKING_URI="http://mlflow:5000"
ENV DVC_CACHE_DIR="/app/.dvc/cache"
ENV GOOGLE_APPLICATION_CREDENTIALS="/app/google-credentials.json"
ENV TF_CPP_MIN_LOG_LEVEL=1
ENV CUDA_VISIBLE_DEVICES=0

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    git \
    curl \
    wget \
    unzip \
    build-essential \
    pkg-config \
    libhdf5-dev \
    libopencv-dev \
    python3-opencv \
    && rm -rf /var/lib/apt/lists/*

# Upgrade pip and install core ML packages
RUN pip install --upgrade pip setuptools wheel

# Copy requirements first for better caching
COPY requirements.txt /tmp/requirements.txt

# Install base requirements
RUN pip install --no-cache-dir -r /tmp/requirements.txt

# Install training-specific packages
RUN pip install --no-cache-dir \
    # Deep Learning & Neural Networks
    tensorflow==2.13.0 \
    keras==2.13.1 \
    tensorflow-addons==0.21.0 \
    # Experiment Tracking & Optimization
    mlflow==2.7.1 \
    optuna==3.4.0 \
    optuna-integration[mlflow]==3.4.0 \
    # Data Versioning & Storage
    dvc[gdrive]==3.25.0 \
    # Visualization & Analysis
    matplotlib==3.7.2 \
    seaborn==0.12.2 \
    plotly==5.17.0 \
    # Model Analysis & Metrics
    scikit-learn==1.3.0 \
    scipy==1.11.3 \
    # Google Cloud & Authentication
    google-auth==2.23.3 \
    google-auth-oauthlib==1.0.0 \
    google-auth-httplib2==0.1.1 \
    PyDrive2==1.17.0 \
    # Additional Utilities
    tqdm==4.66.1 \
    joblib==1.3.2 \
    psutil==5.9.6 \
    wandb==0.15.12

# Install Jupyter for interactive development
RUN pip install --no-cache-dir \
    jupyter==1.0.0 \
    jupyterlab==4.0.6 \
    ipywidgets==8.1.1

# Create necessary directories
RUN mkdir -p /app/src/models \
    /app/src/training \
    /app/data/raw \
    /app/data/processed \
    /app/models/trained \
    /app/models/artifacts \
    /app/notebooks \
    /app/experiments \
    /app/logs \
    /app/.dvc/cache

# Copy project files
COPY src/ /app/src/
COPY configs/ /app/configs/
COPY notebooks/ /app/notebooks/
COPY .dvc/ /app/.dvc/

# Copy training scripts (will be created)
COPY train.py /app/
COPY hyperparameter_tuning.py /app/
COPY model_evaluation.py /app/

# Set up MLflow tracking
RUN mkdir -p /app/mlruns

# Create a script to check GPU availability
RUN echo '#!/bin/bash\n\
echo "=== GPU Check ==="\n\
python3 -c "import tensorflow as tf; print(f\"TensorFlow version: {tf.__version__}\"); print(f\"GPU Available: {tf.config.list_physical_devices(\"GPU\")}\"); print(f\"CUDA Available: {tf.test.is_built_with_cuda()}\")" \n\
echo "=== MLflow Check ==="\n\
python3 -c "import mlflow; print(f\"MLflow version: {mlflow.__version__}\")" \n\
echo "=== DVC Check ==="\n\
python3 -c "import dvc.api; print(\"DVC API available\")" \n\
echo "=== Environment Ready ==="\n\
' > /app/check_environment.sh && chmod +x /app/check_environment.sh

# Create entrypoint script
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
echo "ðŸš€ Starting SENSEX MLOps Training Environment"\n\
echo "Current directory: $(pwd)"\n\
echo "Python path: $PYTHONPATH"\n\
echo "MLflow URI: $MLFLOW_TRACKING_URI"\n\
\n\
# Run environment check\n\
/app/check_environment.sh\n\
\n\
# Execute the provided command or default to bash\n\
if [ $# -eq 0 ]; then\n\
    echo "No command provided, starting interactive bash session"\n\
    exec bash\n\
else\n\
    echo "Executing: $@"\n\
    exec "$@"\n\
fi\n\
' > /app/entrypoint.sh && chmod +x /app/entrypoint.sh

# Set proper permissions
RUN chown -R 1000:1000 /app

# Expose ports for MLflow, Jupyter, TensorBoard
EXPOSE 5000 8888 6006

# Set the entrypoint
ENTRYPOINT ["/app/entrypoint.sh"]

# Default command
CMD ["bash"]
